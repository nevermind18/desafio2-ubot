public class AVLTree {    @Override    public String toString() {        return "AVLTree{" +                "root=" + root +                '}';    }    private Node root;    private int height(Node node) {        if (node == null) return 0;        return node.height;    }    private int balanceFactor(Node node) {        if (node == null) return 0;        return height(node.left) - height(node.right);    }    private Node rightRotate(Node y) {        Node x = y.left;        Node T2 = x.right;        x.right = y;        y.left = T2;        y.height = Math.max(height(y.left), height(y.right)) + 1;        x.height = Math.max(height(x.left), height(x.right)) + 1;        return x;    }    private Node leftRotate(Node x) {        Node y = x.right;        Node T2 = y.left;        y.left = x;        x.right = T2;        x.height = Math.max(height(x.left), height(x.right)) + 1;        y.height = Math.max(height(y.left), height(y.right)) + 1;        return y;    }    private Node insert(Node node, int value) {        if (node == null) {            return new Node(value);        }        if (value < node.value) {            node.left = insert(node.left, value);        } else if (value > node.value) {            node.right = insert(node.right, value);        } else {            return node;        }        node.height = 1 + Math.max(height(node.left), height(node.right));        int balance = balanceFactor(node);        if (balance > 1) {            if (value < node.left.value) {                return rightRotate(node);            } else {                node.left = leftRotate(node.left);                return rightRotate(node);            }        }        if (balance < -1) {            if (value > node.right.value) {                return leftRotate(node);            } else {                node.right = rightRotate(node.right);                return leftRotate(node);            }        }        return node;    }    public void insert(int value) {        root = insert(root, value);    }    private void inorderTraversal(Node node) {        if (node != null) {            inorderTraversal(node.left);            inorderTraversal(node.right);        }    }    public void inorderTraversal() {        inorderTraversal(root);    }}